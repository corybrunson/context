test <- matrix(1:9,ncol=3)
test
test[-1, -2]
scale
test <- list(a = 1, b = 5:7)
test
test[2]
length(test[2])
test <- factor(letters, levels = letters[sample(26)])
test
sort(test)
test <- matrix(1:9,ncol=3)
rownames(test) <- factor(letters[1:3])
test
rownames(test)
levels(rownames(test))
intersect(factor(letters[1:3]), letters[1:3])
intersect(factor(letters[1:3]), factor(letters[1:3]))
factor(letters[1:3])
setequal(letters, c(letters, letters))
setequal(letters, c(letters, factor(letters)))
setequal(letters, c(factor(letters), factor(letters)))
setequal(factor(letters), c(letters, letters))
?setequal
test <- list(a = 1:3)
names(test)
setequal(c("a","b",NA), c("a","b"))
setequal(c("a","b",NA), c("a","b",NA))
?dplyr::merge
??merge
dat <- data.frame(a=1:3,b=4:6,c=letters[1:3])
dat
tidyr::unite(dat, col = 1:2)
?tidyr::unite
tidyr::unite(dat, col = test, a:c, sep = ".")
dat
dat$a
dat[, a]
dat[, "a"]
dat[, "a", drop = F]
is.data.frame(dat[, "a", drop = F])
dat
tidyr::spread(dat, a, b)
tidyr::gather(tidyr::spread(dat, a, b), "a", "b", 2:4)
tidyr::spread
col_name
substitute
substitute(a)
?substitute
derived
length(NULL)
test
scale = matrix(1:9, ncol = 3)
rownames(scale) <- letters[1:3]
colnames(scale) <- LETTERS[1:3]
scale
as.data.frame(cbind(rownames(scale), scale))
dat
names(dat)
names(dat)[2]
names(dat)["b"]
tidyr::unite(dat, col = test, a:c, sep = ".")
?tidyr::spread
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param
#' @param scale Named list. The elements are scales (or, eventually, character
#'   strings indicating among standard scales) and the names indicate the
#'   variables (columns) of \code{data} to be scaled by them.
#' @return A binary matrix (formal context).
#' @export
scale_context <- function(data, var, scale) {
n <- ncol(data)
# ensure that the scale is a binary matrix
stopifnot(all(scale %in% 0:1))
# verify that the values of the variable are the objects of the scale
stopifnot(setequal(data[[var]], rownames(scale)))
# merge scale into data
scale_data <- as.data.frame(cbind(rownames(scale), scale))
names(scale_data)[1] <- var
data <- merge(data, as.data.frame(scale), by = var,
all.x = TRUE, all.y = FALSE)
# return new columns in matrix form
as.matrix(data[, (n + 1):ncol(data)])
}
scales_context <- function(data, cols = names(scales), scales) {
stopifnot(length(cols) == length(scales))
as.data.frame(dplyr::bind_cols(lapply(1:length(scales), function(i) {
scale_context(data = data, col = names(scales)[i], scale = scales[[i]])
})))
}
dat
