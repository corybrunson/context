?strsplit
?attach
titanic_data
Sex == "Female"
with(titanic_data, Sex == "Female")
scale_by_predicate
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
n <- ncol(data)
# evaluate predicate
col <- with(data, as.numeric(eval(predicate)))
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
colnames(ctx) <- as.character(predicate)
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
??lazyeval
lazy_dots
lazyeval::lazy_dots(x = 1)
lazyeval::lazy_dots(x == 1)
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
n <- ncol(data)
# evaluate predicate
col <- with(data, as.numeric(eval(predicate)))
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
colnames(ctx) <- as.character(predicate)
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
test <- function(data, predicate) data
test(titanic_data, Sex == "Female")
eval(Sex == "Female")
with(titanic_data, as.numeric(eval(predicate)))
with(titanic_data, as.numeric(eval(Sex == "Female")))
test <- function(data, predicate) {
n <- ncol(data)
data
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
n <- ncol(data)
col <- with(data, as.numeric(eval(predicate)))
data
}
test(titanic_data, Sex == "Female")
?eval
test <- function(data, predicate) {
n <- ncol(data)
col <- eval(predicate, data)
data
}
?eval
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
n <- ncol(data)
col <- eval(predicate, data)
data
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
n <- ncol(data)
col <- evalq(predicate, data)
data
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
n <- ncol(data)
col <- eval(predicate, envir = data)
data
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
n <- ncol(data)
col <- evalq(predicate, envir = data)
data
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
n <- ncol(data)
col <- with(data, eval(predicate, envir = data))
data
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
n <- ncol(data)
col <- eval(with(data, predicate))
data
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
n <- ncol(data)
col <- eval(with(data, predicate), envir = data)
data
}
test(titanic_data, Sex == "Female")
with(titanic_data, Sex == "Female")
Sex == "Female"
test <- function(data, predicate) {
col <- eval(with(data, predicate), envir = data)
data
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- eval(with(data, expression(predicate)), envir = data)
data
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- with(data, expression(predicate))
data
}
test(titanic_data, Sex == "Female")
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
# evaluate predicate
col <- with(data, as.numeric(expression(predicate)))
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
colnames(ctx) <- as.character(predicate)
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- with(data, expression(predicate))
ctx <- as.matrix(col, ncol = 1)
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- with(data, expression(predicate))
ctx <- as.matrix(col, ncol = 1)
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- with(data, expression(predicate))
ctx <- as.matrix(col, ncol = 1)
ctx
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- as.numeric(with(data, expression(predicate)))
ctx <- as.matrix(col, ncol = 1)
ctx
}
test(titanic_data, Sex == "Female")
?with
with(titanic_data, expression(Sex == "Female"))
test <- function(data, predicate) {
col <- as.numeric(with(data, expression(predicate)))
col
}
with(titanic_data, expression(Sex == "Female"))
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- as.numeric(with(data, expression(predicate)))
col
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- with(data, expression(predicate))
col
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- with(data, eval(expression(predicate)))
col
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- eval(with(data, expression(predicate)))
col
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- eval(with(data, expression(predicate)), envir = data)
col
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- with(data, eval(parse(predicate)))
col
}
test(titanic_data, Sex == "Female")
?parse
test <- function(data, predicate) {
col <- with(data, eval(parse(expression(predicate))))
col
}
?parse
test <- function(data, predicate) {
col <- with(data, eval(parse(expression(predicate))))
col
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- as.character(predicate)
col
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- deparse(predicate)
col
}
test(titanic_data, Sex == "Female")
?call
test <- function(data, predicate) {
col <- with(data, call(predicate))
col
}
test(titanic_data, Sex == "Female")
call(x = 5)
call(5)
parse(5 == 6)
expression(5 == 6)
eval(expression(5 == 6))
eval(expression(Sex == "Female"), envir = titanic_data)
test <- function(data, predicate) {
col <- eval(expression(predicate), envir = data)
col
}
test(titanic_data, Sex == "Female")
eval(Sex == "Female", envir = titanic_data)
as.expression(5 == 6)
substitute(5 == 6)
test <- function(data, predicate) {
col <- eval(substitute(predicate), envir = data)
col
}
test(titanic_data, Sex == "Female")
?substitute
test <- function(data, predicate) {
col <- eval(substitute(predicate, env = data))
col
}
test(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- eval(substitute(predicate), envir = data)
col
}
test(titanic_data, Sex == "Female")
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
# evaluate predicate
col <- as.numeric(eval(substitute(predicate), envir = data))
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
colnames(ctx) <- as.character(predicate)
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
test <- function(data, predicate) {
col <- eval(substitute(predicate), envir = data)
col
}
test(titanic_data, Sex == "Female")
load_all()
scale_by_predicate(titanic_data, Sex == "Female")
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
# evaluate predicate
col <- as.numeric(eval(substitute(predicate), envir = data))
print(col)
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
#colnames(ctx) <- as.character(predicate)
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
# evaluate predicate
col <- as.numeric(eval(substitute(predicate), envir = data))
print(col)
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
colnames(ctx) <- substitute(predicate)
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
# evaluate predicate
col <- as.numeric(eval(substitute(predicate), envir = data))
print(col)
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
colnames(ctx) <- as.character(substitute(predicate))
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
# evaluate predicate
col <- as.numeric(eval(substitute(predicate), envir = data))
print(col)
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
#colnames(ctx) <- as.character(substitute(predicate))
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
# evaluate predicate
col <- as.numeric(eval(substitute(predicate), envir = data))
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
colnames(ctx) <- as.character(predicate)
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
# evaluate predicate
col <- as.numeric(eval(substitute(predicate), envir = data))
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
#colnames(ctx) <- as.character(predicate)
print(parse(predicate))
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
# evaluate predicate
col <- as.numeric(eval(substitute(predicate), envir = data))
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
#colnames(ctx) <- as.character(predicate)
print(substitute(predicate))
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
# evaluate predicate
col <- as.numeric(eval(substitute(predicate), envir = data))
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
#colnames(ctx) <- as.character(predicate)
print(parse(substitute(predicate)))
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
# evaluate predicate
col <- as.numeric(eval(substitute(predicate), envir = data))
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
#colnames(ctx) <- as.character(predicate)
print(as.character(substitute(predicate)))
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
as.character(substitute(Sex == "Female"))
toString(substitute(Sex == "Female"))
substitute(Sex == "Female")
paste0(substitute(Sex == "Female"))
paste(substitute(Sex == "Female"))
substitute(Sex == "Female")
as.character(substitute(Sex == "Female"))
print(substitute(Sex == "Female"))
str(substitute(Sex == "Female"))
cat(substitute(Sex == "Female"))
quote(substitute(Sex == "Female"))
enquote(substitute(Sex == "Female"))
print(enquote(substitute(Sex == "Female")))
as.character(enquote(substitute(Sex == "Female")))
substitute(Sex == "Female")
test <- substitute(Sex == "Female")
test
names(test)
names(test) <- test
expression(test)
test
as.expression(test)
names(test) <- as.expression(test)
test
as.character(as.expression(test))
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
# evaluate predicate
col <- as.numeric(eval(substitute(predicate), envir = data))
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
#colnames(ctx) <- as.character(predicate)
print(as.character(as.expression(substitute(predicate))))
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
# evaluate predicate
col <- as.numeric(eval(substitute(predicate), envir = data))
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
colnames(ctx) <- as.expression(substitute(predicate))
print(as.character(as.expression(substitute(predicate))))
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
#' Expand variables in a data frame via conceptual scaling
#'
#' @param data Data frame.
#' @param predicate A logical expression involving variables in \code{data}.
#' @return A binary matrix (formal context).
#' @export
scale_by_predicate <- function(data, predicate) {
# evaluate predicate
col <- as.numeric(eval(substitute(predicate), envir = data))
# return new column in matrix form
ctx <- as.matrix(col, ncol = 1)
rownames(ctx) <- rownames(data)
colnames(ctx) <- as.expression(substitute(predicate))
ctx
}
scale_by_predicate(titanic_data, Sex == "Female")
check()
install()
